#![doc = "Peripheral access API for HDSC_HC32L13X microcontrollers (generated using svd2rust v0.24.1 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.24.1/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![deny(const_err)]
#![deny(dead_code)]
#![deny(improper_ctypes)]
#![deny(missing_docs)]
#![deny(no_mangle_generic_items)]
#![deny(non_shorthand_field_patterns)]
#![deny(overflowing_literals)]
#![deny(path_statements)]
#![deny(patterns_in_fns_without_body)]
#![deny(private_in_public)]
#![deny(unconditional_recursion)]
#![deny(unused_allocation)]
#![deny(unused_comparisons)]
#![deny(unused_parens)]
#![deny(while_true)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
use core::marker::PhantomData;
use core::ops::Deref;
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 3;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {}
#[doc(hidden)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 0] = [];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum Interrupt {}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        match self {}
    }
}
#[doc = "desc ADC"]
pub struct ADC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADC {}
impl ADC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const adc::RegisterBlock = 0x4000_2400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ADC {
    type Target = adc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ADC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC").finish()
    }
}
#[doc = "desc ADC"]
pub mod adc;
#[doc = "desc ADTIM"]
pub struct ADTIM4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADTIM4 {}
impl ADTIM4 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const adtim4::RegisterBlock = 0x4000_3000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adtim4::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ADTIM4 {
    type Target = adtim4::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ADTIM4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADTIM4").finish()
    }
}
#[doc = "desc ADTIM"]
pub mod adtim4;
#[doc = "desc ADTIM"]
pub struct ADTIM5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADTIM5 {}
impl ADTIM5 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const adtim4::RegisterBlock = 0x4000_3400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adtim4::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ADTIM5 {
    type Target = adtim4::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ADTIM5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADTIM5").finish()
    }
}
#[doc = "desc ADTIM"]
pub use adtim4 as adtim5;
#[doc = "desc ADTIM"]
pub struct ADTIM6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADTIM6 {}
impl ADTIM6 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const adtim4::RegisterBlock = 0x4000_3800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adtim4::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ADTIM6 {
    type Target = adtim4::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ADTIM6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADTIM6").finish()
    }
}
#[doc = "desc ADTIM"]
pub use adtim4 as adtim6;
#[doc = "desc AES"]
pub struct AES {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AES {}
impl AES {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const aes::RegisterBlock = 0x4002_1400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aes::RegisterBlock {
        Self::PTR
    }
}
impl Deref for AES {
    type Target = aes::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for AES {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AES").finish()
    }
}
#[doc = "desc AES"]
pub mod aes;
#[doc = "desc BGR"]
pub struct BGR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for BGR {}
impl BGR {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const bgr::RegisterBlock = 0x4000_2400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const bgr::RegisterBlock {
        Self::PTR
    }
}
impl Deref for BGR {
    type Target = bgr::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for BGR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BGR").finish()
    }
}
#[doc = "desc BGR"]
pub mod bgr;
#[doc = "desc CLK_TRIM"]
pub struct CLK_TRIM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CLK_TRIM {}
impl CLK_TRIM {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const clk_trim::RegisterBlock = 0x4000_1800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const clk_trim::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CLK_TRIM {
    type Target = clk_trim::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CLK_TRIM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CLK_TRIM").finish()
    }
}
#[doc = "desc CLK_TRIM"]
pub mod clk_trim;
#[doc = "desc CRC"]
pub struct CRC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CRC {}
impl CRC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const crc::RegisterBlock = 0x4002_0900 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const crc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CRC {
    type Target = crc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRC").finish()
    }
}
#[doc = "desc CRC"]
pub mod crc;
#[doc = "desc DEBUG_ACTIVE"]
pub struct DEBUG_ACTIVE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DEBUG_ACTIVE {}
impl DEBUG_ACTIVE {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const debug_active::RegisterBlock = 0x4000_2038 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const debug_active::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DEBUG_ACTIVE {
    type Target = debug_active::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DEBUG_ACTIVE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DEBUG_ACTIVE").finish()
    }
}
#[doc = "desc DEBUG_ACTIVE"]
pub mod debug_active;
#[doc = "desc DMAC"]
pub struct DMAC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DMAC {}
impl DMAC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dmac::RegisterBlock = 0x4002_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dmac::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DMAC {
    type Target = dmac::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DMAC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMAC").finish()
    }
}
#[doc = "desc DMAC"]
pub mod dmac;
#[doc = "desc FLASH"]
pub struct FLASH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FLASH {}
impl FLASH {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const flash::RegisterBlock = 0x4002_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const flash::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FLASH {
    type Target = flash::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FLASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLASH").finish()
    }
}
#[doc = "desc FLASH"]
pub mod flash;
#[doc = "desc GPIO"]
pub struct GPIO {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIO {}
impl GPIO {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpio::RegisterBlock = 0x4002_0c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpio::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIO {
    type Target = gpio::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIO {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIO").finish()
    }
}
#[doc = "desc GPIO"]
pub mod gpio;
#[doc = "desc HDIV"]
pub struct HDIV {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for HDIV {}
impl HDIV {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const hdiv::RegisterBlock = 0x4002_1800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const hdiv::RegisterBlock {
        Self::PTR
    }
}
impl Deref for HDIV {
    type Target = hdiv::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for HDIV {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HDIV").finish()
    }
}
#[doc = "desc HDIV"]
pub mod hdiv;
#[doc = "desc I2C"]
pub struct I2C0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C0 {}
impl I2C0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2c0::RegisterBlock = 0x4000_0400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C0 {
    type Target = i2c0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C0").finish()
    }
}
#[doc = "desc I2C"]
pub mod i2c0;
#[doc = "desc I2C"]
pub struct I2C1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C1 {}
impl I2C1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2c0::RegisterBlock = 0x4000_4400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C1 {
    type Target = i2c0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1").finish()
    }
}
#[doc = "desc I2C"]
pub use i2c0 as i2c1;
#[doc = "desc LCD"]
pub struct LCD {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LCD {}
impl LCD {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lcd::RegisterBlock = 0x4000_5c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lcd::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LCD {
    type Target = lcd::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LCD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LCD").finish()
    }
}
#[doc = "desc LCD"]
pub mod lcd;
#[doc = "desc LPTIMER"]
pub struct LPTIMER {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPTIMER {}
impl LPTIMER {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lptimer::RegisterBlock = 0x4000_0f00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lptimer::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPTIMER {
    type Target = lptimer::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPTIMER {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIMER").finish()
    }
}
#[doc = "desc LPTIMER"]
pub mod lptimer;
#[doc = "desc LPUART"]
pub struct LPUART0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPUART0 {}
impl LPUART0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lpuart0::RegisterBlock = 0x4000_0200 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpuart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPUART0 {
    type Target = lpuart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPUART0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART0").finish()
    }
}
#[doc = "desc LPUART"]
pub mod lpuart0;
#[doc = "desc LPUART"]
pub struct LPUART1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPUART1 {}
impl LPUART1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lpuart0::RegisterBlock = 0x4000_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpuart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPUART1 {
    type Target = lpuart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPUART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART1").finish()
    }
}
#[doc = "desc LPUART"]
pub use lpuart0 as lpuart1;
#[doc = "desc LVD"]
pub struct LVD {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LVD {}
impl LVD {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lvd::RegisterBlock = 0x4000_2400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lvd::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LVD {
    type Target = lvd::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LVD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LVD").finish()
    }
}
#[doc = "desc LVD"]
pub mod lvd;
#[doc = "desc OPA"]
pub struct OPA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for OPA {}
impl OPA {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const opa::RegisterBlock = 0x4000_2400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const opa::RegisterBlock {
        Self::PTR
    }
}
impl Deref for OPA {
    type Target = opa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for OPA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OPA").finish()
    }
}
#[doc = "desc OPA"]
pub mod opa;
#[doc = "desc PCA"]
pub struct PCA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PCA {}
impl PCA {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pca::RegisterBlock = 0x4000_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pca::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PCA {
    type Target = pca::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PCA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PCA").finish()
    }
}
#[doc = "desc PCA"]
pub mod pca;
#[doc = "desc PCNT"]
pub struct PCNT {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PCNT {}
impl PCNT {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pcnt::RegisterBlock = 0x4000_5400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pcnt::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PCNT {
    type Target = pcnt::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PCNT {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PCNT").finish()
    }
}
#[doc = "desc PCNT"]
pub mod pcnt;
#[doc = "desc RAM"]
pub struct RAM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RAM {}
impl RAM {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ram::RegisterBlock = 0x4002_0400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ram::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RAM {
    type Target = ram::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RAM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RAM").finish()
    }
}
#[doc = "desc RAM"]
pub mod ram;
#[doc = "desc RESET"]
pub struct RESET {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RESET {}
impl RESET {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const reset::RegisterBlock = 0x4000_201c as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const reset::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RESET {
    type Target = reset::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RESET {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RESET").finish()
    }
}
#[doc = "desc RESET"]
pub mod reset;
#[doc = "desc RTC"]
pub struct RTC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RTC {}
impl RTC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const rtc::RegisterBlock = 0x4000_1400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rtc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RTC {
    type Target = rtc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTC").finish()
    }
}
#[doc = "desc RTC"]
pub mod rtc;
#[doc = "desc SPI"]
pub struct SPI0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI0 {}
impl SPI0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi0::RegisterBlock = 0x4000_0800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI0 {
    type Target = spi0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI0").finish()
    }
}
#[doc = "desc SPI"]
pub mod spi0;
#[doc = "desc SPI"]
pub struct SPI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI1 {}
impl SPI1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi0::RegisterBlock = 0x4000_4800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI1 {
    type Target = spi0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1").finish()
    }
}
#[doc = "desc SPI"]
pub use spi0 as spi1;
#[doc = "desc SYSCTRL"]
pub struct SYSCTRL {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SYSCTRL {}
impl SYSCTRL {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sysctrl::RegisterBlock = 0x4000_2000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sysctrl::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SYSCTRL {
    type Target = sysctrl::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SYSCTRL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSCTRL").finish()
    }
}
#[doc = "desc SYSCTRL"]
pub mod sysctrl;
#[doc = "desc TIM0_MODE0"]
pub struct TIM0_MODE0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM0_MODE0 {}
impl TIM0_MODE0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim0_mode0::RegisterBlock = 0x4000_0c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim0_mode0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM0_MODE0 {
    type Target = tim0_mode0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM0_MODE0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM0_MODE0").finish()
    }
}
#[doc = "desc TIM0_MODE0"]
pub mod tim0_mode0;
#[doc = "desc TIM0_MODE1"]
pub struct TIM0_MODE1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM0_MODE1 {}
impl TIM0_MODE1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim0_mode1::RegisterBlock = 0x4000_0c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim0_mode1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM0_MODE1 {
    type Target = tim0_mode1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM0_MODE1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM0_MODE1").finish()
    }
}
#[doc = "desc TIM0_MODE1"]
pub mod tim0_mode1;
#[doc = "desc TIM0_MODE23"]
pub struct TIM0_MODE23 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM0_MODE23 {}
impl TIM0_MODE23 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim0_mode23::RegisterBlock = 0x4000_0c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim0_mode23::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM0_MODE23 {
    type Target = tim0_mode23::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM0_MODE23 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM0_MODE23").finish()
    }
}
#[doc = "desc TIM0_MODE23"]
pub mod tim0_mode23;
#[doc = "desc TIM1_MODE0"]
pub struct TIM1_MODE0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM1_MODE0 {}
impl TIM1_MODE0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim1_mode0::RegisterBlock = 0x4000_0d00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim1_mode0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM1_MODE0 {
    type Target = tim1_mode0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM1_MODE0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM1_MODE0").finish()
    }
}
#[doc = "desc TIM1_MODE0"]
pub mod tim1_mode0;
#[doc = "desc TIM1_MODE1"]
pub struct TIM1_MODE1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM1_MODE1 {}
impl TIM1_MODE1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim1_mode1::RegisterBlock = 0x4000_0d00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim1_mode1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM1_MODE1 {
    type Target = tim1_mode1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM1_MODE1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM1_MODE1").finish()
    }
}
#[doc = "desc TIM1_MODE1"]
pub mod tim1_mode1;
#[doc = "desc TIM1_MODE23"]
pub struct TIM1_MODE23 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM1_MODE23 {}
impl TIM1_MODE23 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim1_mode23::RegisterBlock = 0x4000_0d00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim1_mode23::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM1_MODE23 {
    type Target = tim1_mode23::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM1_MODE23 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM1_MODE23").finish()
    }
}
#[doc = "desc TIM1_MODE23"]
pub mod tim1_mode23;
#[doc = "desc TIM2_MODE0"]
pub struct TIM2_MODE0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM2_MODE0 {}
impl TIM2_MODE0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim2_mode0::RegisterBlock = 0x4000_0e00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim2_mode0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM2_MODE0 {
    type Target = tim2_mode0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM2_MODE0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM2_MODE0").finish()
    }
}
#[doc = "desc TIM2_MODE0"]
pub mod tim2_mode0;
#[doc = "desc TIM2_MODE1"]
pub struct TIM2_MODE1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM2_MODE1 {}
impl TIM2_MODE1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim2_mode1::RegisterBlock = 0x4000_0e00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim2_mode1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM2_MODE1 {
    type Target = tim2_mode1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM2_MODE1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM2_MODE1").finish()
    }
}
#[doc = "desc TIM2_MODE1"]
pub mod tim2_mode1;
#[doc = "desc TIM2_MODE23"]
pub struct TIM2_MODE23 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM2_MODE23 {}
impl TIM2_MODE23 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim2_mode23::RegisterBlock = 0x4000_0e00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim2_mode23::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM2_MODE23 {
    type Target = tim2_mode23::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM2_MODE23 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM2_MODE23").finish()
    }
}
#[doc = "desc TIM2_MODE23"]
pub mod tim2_mode23;
#[doc = "desc TIM3_MODE0"]
pub struct TIM3_MODE0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM3_MODE0 {}
impl TIM3_MODE0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim3_mode0::RegisterBlock = 0x4000_5800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim3_mode0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM3_MODE0 {
    type Target = tim3_mode0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM3_MODE0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM3_MODE0").finish()
    }
}
#[doc = "desc TIM3_MODE0"]
pub mod tim3_mode0;
#[doc = "desc TIM3_MODE1"]
pub struct TIM3_MODE1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM3_MODE1 {}
impl TIM3_MODE1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim3_mode1::RegisterBlock = 0x4000_5800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim3_mode1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM3_MODE1 {
    type Target = tim3_mode1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM3_MODE1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM3_MODE1").finish()
    }
}
#[doc = "desc TIM3_MODE1"]
pub mod tim3_mode1;
#[doc = "desc TIM3_MODE23"]
pub struct TIM3_MODE23 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM3_MODE23 {}
impl TIM3_MODE23 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tim3_mode23::RegisterBlock = 0x4000_5800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim3_mode23::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM3_MODE23 {
    type Target = tim3_mode23::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM3_MODE23 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM3_MODE23").finish()
    }
}
#[doc = "desc TIM3_MODE23"]
pub mod tim3_mode23;
#[doc = "desc TRNG"]
pub struct TRNG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TRNG {}
impl TRNG {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const trng::RegisterBlock = 0x4000_4c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const trng::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TRNG {
    type Target = trng::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TRNG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TRNG").finish()
    }
}
#[doc = "desc TRNG"]
pub mod trng;
#[doc = "desc UART"]
pub struct UART0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART0 {}
impl UART0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0x4000_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART0 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART0").finish()
    }
}
#[doc = "desc UART"]
pub mod uart0;
#[doc = "desc UART"]
pub struct UART1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART1 {}
impl UART1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0x4000_0100 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART1 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART1").finish()
    }
}
#[doc = "desc UART"]
pub use uart0 as uart1;
#[doc = "desc VC"]
pub struct VC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for VC {}
impl VC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const vc::RegisterBlock = 0x4000_2400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const vc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for VC {
    type Target = vc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for VC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("VC").finish()
    }
}
#[doc = "desc VC"]
pub mod vc;
#[doc = "desc WDT"]
pub struct WDT {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for WDT {}
impl WDT {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const wdt::RegisterBlock = 0x4000_0f00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wdt::RegisterBlock {
        Self::PTR
    }
}
impl Deref for WDT {
    type Target = wdt::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for WDT {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WDT").finish()
    }
}
#[doc = "desc WDT"]
pub mod wdt;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r"All the peripherals"]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "ADC"]
    pub ADC: ADC,
    #[doc = "ADTIM4"]
    pub ADTIM4: ADTIM4,
    #[doc = "ADTIM5"]
    pub ADTIM5: ADTIM5,
    #[doc = "ADTIM6"]
    pub ADTIM6: ADTIM6,
    #[doc = "AES"]
    pub AES: AES,
    #[doc = "BGR"]
    pub BGR: BGR,
    #[doc = "CLK_TRIM"]
    pub CLK_TRIM: CLK_TRIM,
    #[doc = "CRC"]
    pub CRC: CRC,
    #[doc = "DEBUG_ACTIVE"]
    pub DEBUG_ACTIVE: DEBUG_ACTIVE,
    #[doc = "DMAC"]
    pub DMAC: DMAC,
    #[doc = "FLASH"]
    pub FLASH: FLASH,
    #[doc = "GPIO"]
    pub GPIO: GPIO,
    #[doc = "HDIV"]
    pub HDIV: HDIV,
    #[doc = "I2C0"]
    pub I2C0: I2C0,
    #[doc = "I2C1"]
    pub I2C1: I2C1,
    #[doc = "LCD"]
    pub LCD: LCD,
    #[doc = "LPTIMER"]
    pub LPTIMER: LPTIMER,
    #[doc = "LPUART0"]
    pub LPUART0: LPUART0,
    #[doc = "LPUART1"]
    pub LPUART1: LPUART1,
    #[doc = "LVD"]
    pub LVD: LVD,
    #[doc = "OPA"]
    pub OPA: OPA,
    #[doc = "PCA"]
    pub PCA: PCA,
    #[doc = "PCNT"]
    pub PCNT: PCNT,
    #[doc = "RAM"]
    pub RAM: RAM,
    #[doc = "RESET"]
    pub RESET: RESET,
    #[doc = "RTC"]
    pub RTC: RTC,
    #[doc = "SPI0"]
    pub SPI0: SPI0,
    #[doc = "SPI1"]
    pub SPI1: SPI1,
    #[doc = "SYSCTRL"]
    pub SYSCTRL: SYSCTRL,
    #[doc = "TIM0_MODE0"]
    pub TIM0_MODE0: TIM0_MODE0,
    #[doc = "TIM0_MODE1"]
    pub TIM0_MODE1: TIM0_MODE1,
    #[doc = "TIM0_MODE23"]
    pub TIM0_MODE23: TIM0_MODE23,
    #[doc = "TIM1_MODE0"]
    pub TIM1_MODE0: TIM1_MODE0,
    #[doc = "TIM1_MODE1"]
    pub TIM1_MODE1: TIM1_MODE1,
    #[doc = "TIM1_MODE23"]
    pub TIM1_MODE23: TIM1_MODE23,
    #[doc = "TIM2_MODE0"]
    pub TIM2_MODE0: TIM2_MODE0,
    #[doc = "TIM2_MODE1"]
    pub TIM2_MODE1: TIM2_MODE1,
    #[doc = "TIM2_MODE23"]
    pub TIM2_MODE23: TIM2_MODE23,
    #[doc = "TIM3_MODE0"]
    pub TIM3_MODE0: TIM3_MODE0,
    #[doc = "TIM3_MODE1"]
    pub TIM3_MODE1: TIM3_MODE1,
    #[doc = "TIM3_MODE23"]
    pub TIM3_MODE23: TIM3_MODE23,
    #[doc = "TRNG"]
    pub TRNG: TRNG,
    #[doc = "UART0"]
    pub UART0: UART0,
    #[doc = "UART1"]
    pub UART1: UART1,
    #[doc = "VC"]
    pub VC: VC,
    #[doc = "WDT"]
    pub WDT: WDT,
}
impl Peripherals {
    #[doc = r"Returns all the peripherals *once*"]
    #[inline]
    pub fn take() -> Option<Self> {
        cortex_m::interrupt::free(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                None
            } else {
                Some(unsafe { Peripherals::steal() })
            }
        })
    }
    #[doc = r"Unchecked version of `Peripherals::take`"]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            ADC: ADC {
                _marker: PhantomData,
            },
            ADTIM4: ADTIM4 {
                _marker: PhantomData,
            },
            ADTIM5: ADTIM5 {
                _marker: PhantomData,
            },
            ADTIM6: ADTIM6 {
                _marker: PhantomData,
            },
            AES: AES {
                _marker: PhantomData,
            },
            BGR: BGR {
                _marker: PhantomData,
            },
            CLK_TRIM: CLK_TRIM {
                _marker: PhantomData,
            },
            CRC: CRC {
                _marker: PhantomData,
            },
            DEBUG_ACTIVE: DEBUG_ACTIVE {
                _marker: PhantomData,
            },
            DMAC: DMAC {
                _marker: PhantomData,
            },
            FLASH: FLASH {
                _marker: PhantomData,
            },
            GPIO: GPIO {
                _marker: PhantomData,
            },
            HDIV: HDIV {
                _marker: PhantomData,
            },
            I2C0: I2C0 {
                _marker: PhantomData,
            },
            I2C1: I2C1 {
                _marker: PhantomData,
            },
            LCD: LCD {
                _marker: PhantomData,
            },
            LPTIMER: LPTIMER {
                _marker: PhantomData,
            },
            LPUART0: LPUART0 {
                _marker: PhantomData,
            },
            LPUART1: LPUART1 {
                _marker: PhantomData,
            },
            LVD: LVD {
                _marker: PhantomData,
            },
            OPA: OPA {
                _marker: PhantomData,
            },
            PCA: PCA {
                _marker: PhantomData,
            },
            PCNT: PCNT {
                _marker: PhantomData,
            },
            RAM: RAM {
                _marker: PhantomData,
            },
            RESET: RESET {
                _marker: PhantomData,
            },
            RTC: RTC {
                _marker: PhantomData,
            },
            SPI0: SPI0 {
                _marker: PhantomData,
            },
            SPI1: SPI1 {
                _marker: PhantomData,
            },
            SYSCTRL: SYSCTRL {
                _marker: PhantomData,
            },
            TIM0_MODE0: TIM0_MODE0 {
                _marker: PhantomData,
            },
            TIM0_MODE1: TIM0_MODE1 {
                _marker: PhantomData,
            },
            TIM0_MODE23: TIM0_MODE23 {
                _marker: PhantomData,
            },
            TIM1_MODE0: TIM1_MODE0 {
                _marker: PhantomData,
            },
            TIM1_MODE1: TIM1_MODE1 {
                _marker: PhantomData,
            },
            TIM1_MODE23: TIM1_MODE23 {
                _marker: PhantomData,
            },
            TIM2_MODE0: TIM2_MODE0 {
                _marker: PhantomData,
            },
            TIM2_MODE1: TIM2_MODE1 {
                _marker: PhantomData,
            },
            TIM2_MODE23: TIM2_MODE23 {
                _marker: PhantomData,
            },
            TIM3_MODE0: TIM3_MODE0 {
                _marker: PhantomData,
            },
            TIM3_MODE1: TIM3_MODE1 {
                _marker: PhantomData,
            },
            TIM3_MODE23: TIM3_MODE23 {
                _marker: PhantomData,
            },
            TRNG: TRNG {
                _marker: PhantomData,
            },
            UART0: UART0 {
                _marker: PhantomData,
            },
            UART1: UART1 {
                _marker: PhantomData,
            },
            VC: VC {
                _marker: PhantomData,
            },
            WDT: WDT {
                _marker: PhantomData,
            },
        }
    }
}
